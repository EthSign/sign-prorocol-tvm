#pragma version >=0.3.0;

#include "imports/stdlib.fc";
#include "imports/constants.fc";

;; =============== storage =============================

global slice attester;
global int attester_pubkey;
global int timestamp;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();

  attester = ds~load_msg_addr();
  attester_pubkey = ds~load_uint(256);
  timestamp = ds~load_uint(32);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data (slice _attester, int _attester_pubkey, int _timestamp) impure {
  cell data = begin_cell()
    .store_slice(_attester)
    .store_uint(_attester_pubkey, 256)
    .store_uint(_timestamp, 32)
    .end_cell();
    
  set_data(data);
}

;; =============== messages =============================

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) {
    return ();
  }

  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::revoke_attestation) {
    load_data();

    if (timestamp == 1) {
      throw(error::offchain_attestation_already_revoked);
    }

    save_data(attester, attester_pubkey, 1);

    return ();
  }

  throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== getters =============================

cell get_offchain_attestation_data() method_id {
  load_data();
  
  cell attestation_data = begin_cell()
    .store_slice(attester)
    .store_uint(attester_pubkey, 256)
    .store_uint(timestamp, 32)
    .end_cell();

  return attestation_data;
}
