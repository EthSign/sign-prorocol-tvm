builder store_withdraw_completed(builder b) inline {
    return b.store_uint(7614653257073527469736132165096662684165476, 144);
}

(slice, slice, int, int, slice, int, int, int, int, int, tuple, int, int, int, int) __get_attestation_data(cell _attestation) impure inline {
  slice attestation_slice = _attestation.begin_parse();

  slice schema_id = attestation_slice~load_msg_addr();
  slice linked_attestation_id = attestation_slice~load_msg_addr();
  slice attester = attestation_slice~load_msg_addr();
  int attest_timestamp = attestation_slice~load_uint(32);
  int revoke_timestamp = attestation_slice~load_uint(32);
  int attester_pubkey = attestation_slice~load_uint(256);
  int valid_until = attestation_slice~load_uint(32);
  int data_location = attestation_slice~load_uint(2);
  int revoked = attestation_slice~load_uint(1);

  slice s2 = attestation_slice~load_ref().begin_parse();
  int data = s2~load_uint(256);
  int schema_counter_id = s2~load_uint(64);
  int linked_attestation_counter_id = s2~load_uint(64);
  int attestation_counter_id = s2~load_uint(64);

  slice s3 = attestation_slice~load_ref().begin_parse();
  int recipients_len = s3~load_uint(64);
  tuple recipients = empty_tuple();

  int i = recipients_len;
  slice recipient = null();

  while (i > 0) {
    recipient = s3~load_msg_addr();
    
    recipients~tpush(recipient);

    i = i - 1;
  }

  return (schema_id, linked_attestation_id, attest_timestamp, revoke_timestamp, attester, attester_pubkey, valid_until, data_location, revoked, recipients_len, recipients, data, schema_counter_id, linked_attestation_counter_id, attestation_counter_id);
}

(slice, int, int) __get_offchain_attestation_data(cell _offchain_attestation) impure inline {
  slice offchain_attestation_slice = _offchain_attestation.begin_parse();

  slice attester = offchain_attestation_slice~load_msg_addr();
  int attester_pubkey = offchain_attestation_slice~load_uint(256);
  int timestamp = offchain_attestation_slice~load_uint(32);

  return (attester, attester_pubkey, timestamp);
}

int __schema_exists(int schema_counter_id, int schema_timestamp) impure inline {
  return (schema_counter_id < schema_counter) & (schema_counter_id >= 0) & (schema_timestamp > 0);
}

int __attestation_exists(int attestation_counter_id) impure inline {
  return attestation_counter_id < attestation_counter;
}

int __offchain_attestation_exists(int attestation_timestamp) impure inline {
  return attestation_timestamp != 0;
}
