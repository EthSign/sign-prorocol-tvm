(slice, int, int, int, int, int, int, slice, int, slice, cell) __get_schema_data(cell _schema) impure inline {
  slice schema_slice = _schema.begin_parse();

  slice registrant = schema_slice~load_msg_addr();
  int registrant_pubkey = schema_slice~load_uint(256);
  int revocable = schema_slice~load_uint(1);
  int data_location = schema_slice~load_uint(2);
  int max_valid_for = schema_slice~load_uint(32);
  int timestamp = schema_slice~load_uint(32);
  int schema_id = schema_slice~load_uint(64);

  slice s1 = schema_slice~load_ref().begin_parse();
  int data_len = s1~load_uint(8);
  slice data = s1~load_bits(data_len);

  slice s2 = schema_slice~load_ref().begin_parse();
  slice sp_address = s2~load_msg_addr();
  cell attestation_code = s2~load_ref();

  return (registrant, registrant_pubkey, revocable, data_location, max_valid_for, timestamp, data_len, data, schema_id, sp_address, attestation_code);
}

(slice, slice, int, int, slice, int, int, int, int, int, tuple, int, slice, int, int, int, slice, int, int, slice) __get_attestation_data(cell _attestation) impure inline {
  slice attestation_slice = _attestation.begin_parse();

  slice schema_address = attestation_slice~load_msg_addr();
  slice linked_attestation_address = attestation_slice~load_msg_addr();
  slice attester = attestation_slice~load_msg_addr();
  int attest_timestamp = attestation_slice~load_uint(32);
  int revoke_timestamp = attestation_slice~load_uint(32);
  int attester_pubkey = attestation_slice~load_uint(256);
  int valid_until = attestation_slice~load_uint(32);
  int data_location = attestation_slice~load_uint(2);
  int revoked = attestation_slice~load_uint(1);

  slice s2 = attestation_slice~load_ref().begin_parse();
  int data_len = s2~load_uint(8);
  slice data = s2~load_bits(1016);
  int schema_id = s2~load_uint(64);
  int linked_attestation_id = s2~load_uint(64);
  int attestation_id = s2~load_uint(64);
  slice sp_address = s2~load_msg_addr();
  int revocable = s2~load_uint(1);
  int reason_len = s2~load_uint(8);
  slice reason = s2~load_bits(reason_len);


  slice s3 = attestation_slice~load_ref().begin_parse();
  int recipients_len = s3~load_uint(64);
  tuple recipients = cast_to_tuple(s3~load_uint(1023));

  return (schema_address, linked_attestation_address, attest_timestamp, revoke_timestamp, attester, attester_pubkey, valid_until, data_location, revoked, recipients_len, recipients, data_len, data, schema_id, linked_attestation_id, attestation_id, sp_address, revocable, reason_len, reason);
}

(slice, int, int) __get_offchain_attestation_data(cell _offchain_attestation) impure inline {
  slice offchain_attestation_slice = _offchain_attestation.begin_parse();

  slice attester = offchain_attestation_slice~load_msg_addr();
  int attester_pubkey = offchain_attestation_slice~load_uint(256);
  int timestamp = offchain_attestation_slice~load_uint(32);

  return (attester, attester_pubkey, timestamp);
}

int __schema_exists(int schema_id, int schema_counter) impure inline {
  return (schema_id < schema_counter) & (schema_id >= 0);
}

int __attestation_exists(int attestation_id, int attestation_counter) impure inline {
  return attestation_id < attestation_counter;
}

int __offchain_attestation_exists(int attestation_timestamp) impure inline {
  return attestation_timestamp != 0;
}
