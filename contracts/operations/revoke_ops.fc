slice _revoke(slice attestation_id, cell attestation, cell schema, slice reason, int delegate_mode, slice sender_address, int query_id, int coins) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

  (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

  if (attester.slice_empty?()) {
    throw(error::attestation_nonexistent);
  }

  if (delegate_mode != 1 & ~(equal_slices(attester, sender_address))) {
    throw(error::attestation_wrong_attester);
  }

  (slice registrant, int revocable, slice schema_data_location, int max_valid_for, int schema_timestamp, slice schema_data, int schema_counter_id) = __get_schema_data(schema);

  if (revocable != 1) {
    throw(error::attestation_irrevocable);
  }

  if (revoked) {
    throw(error::attestation_already_revoked);
  }

  var msg_body = begin_cell()
      .store_uint(op::revoke_attestation, 32)
      .store_uint(query_id, 64)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(attestation_id)
    .store_coins(coins)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 1);

  console::log_raw("ATTESTATION_REVOKED");
  console::log_raw(attestation_id);
  console::log_raw(reason);
      
  return schema_id;
}

() _revoke_offchain(slice offchain_attestation_id, cell offchain_attestation, slice reason, int delegate_mode, slice sender_address, int query_id) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

  (slice attester, int timestamp) = __get_offchain_attestation_data(offchain_attestation);

  if (~(__offchain_attestation_exists(timestamp))) {
    throw(error::offchain_attestation_nonexistent);
  }

  if (delegate_mode != 1 & equal_slices(attester, sender_address)) {
    throw(error::attestation_wrong_attester);
  }

  if (timestamp == 1) {
    throw(error::offchain_attestation_already_revoked);
  }

  var msg_body = begin_cell()
      .store_uint(op::revoke_attestation, 32)
      .store_uint(query_id, 64)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(offchain_attestation_id)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 1);

  console::log_raw("OFFCHAIN_ATTESTATION_REVOKED");
  console::log_raw(offchain_attestation_id);
  console::log_raw(reason);

  return ();
}

;; =============== revoke =============================

() revoke(slice attestation_id, cell attestation, cell schema, slice reason, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

  if (delegate_mode) {
    __check_delegation_signature(attester, get_delegated_revoke_hash(attestation_id, reason), delegate_signature);
  }

  _revoke(attestation_id, attestation, schema, reason, delegate_mode, sender_address, 0, 0);
}

() revoke_with_fees(slice attestation_id, cell attestation, cell schema, slice reason, int resolver_fees, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice storage_attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  if (delegate_mode) {
    __check_delegation_signature(storage_attester, get_delegated_revoke_hash(attestation_id, reason), delegate_signature);
  }

  _revoke(attestation_id, attestation, schema, reason, delegate_mode, sender_address, 0, resolver_fees);
}

() revoke_batch(tuple attestation_ids, tuple attestations, tuple schemas, tuple reasons, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  slice current_attester = sender_address;
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;
  cell first_attestation = attestations~tpop();
  if (delegate_mode) {
    (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(first_attestation);

    __check_delegation_signature(attester, get_delegated_revoke_batch_hash(attestations, reasons), delegate_signature);

    current_attester = attester;
  }

  if (~(cell::is_empty(first_attestation))) {
    attestations~tpush(first_attestation);
  }

  int i = attestations.tlen();

  while (i > 0) {
    cell attestation = attestations~tpop();

    (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

    if (delegate_mode & ~(equal_slices(attester, current_attester))) {
      throw(error::attestation_wrong_attester);
    }

    _revoke(attestation_ids~tpop(), attestation, schemas~tpop(), reasons~tpop(), delegate_mode, sender_address, 0, 0);
    i = i - 1;
  }
}

() revoke_batch_with_fees(tuple attestation_ids, tuple attestations, tuple schemas, tuple reasons, tuple resolver_fees, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  slice current_attester = sender_address;
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;
  cell first_attestation = attestations~tpop();

  if (delegate_mode) {
    (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice storage_attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(first_attestation);

    __check_delegation_signature(storage_attester, get_delegated_revoke_batch_hash(attestations, reasons), delegate_signature);

    current_attester = storage_attester;
  }

  if (~(cell::is_empty(attestations~tpop()))) {
    attestations~tpush(first_attestation);
  }

  int i = attestations.tlen();

  while (i > 0) {
    cell attestation = attestations~tpop();

    (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice storage_attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, slice data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

    if (delegate_mode & ~(equal_slices(storage_attester, current_attester))) {
      throw(error::attestation_wrong_attester);
    }

    _revoke(attestation_ids~tpop(), attestation, schemas~tpop(), reasons~tpop(), delegate_mode, sender_address, 0, resolver_fees~tpop());
    i = i - 1;
  }
}

() revoke_offchain(slice offchain_attestation_id, cell offchain_attestation, slice reason, slice delegate_signature, slice sender_address) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  if (delegate_mode) {
    (slice storage_attester, int timestamp) = __get_offchain_attestation_data(offchain_attestation);

    __check_delegation_signature(storage_attester, get_delegated_offchain_revoke_hash(offchain_attestation_id, reason), delegate_signature);
  }

  _revoke_offchain(offchain_attestation_id, offchain_attestation, reason, delegate_mode, sender_address, 0);
}

() revoke_offchain_batch(tuple offchain_attestation_ids, tuple offchain_attestations, tuple reasons, slice delegate_signature, slice sender_address) method_id {
  slice current_attester = sender_address;
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;
  cell first_offchain_attestation = offchain_attestations~tpop();

  if (delegate_mode) {
    (slice storage_attester, int timestamp) = __get_offchain_attestation_data(first_offchain_attestation);

    __check_delegation_signature(storage_attester, get_delegated_offchain_revoke_batch_hash(offchain_attestation_ids, reasons), delegate_signature);

    current_attester = storage_attester;
  }

  if (~(cell::is_empty(first_offchain_attestation))) {
    offchain_attestations~tpush(first_offchain_attestation);
  }

  int i = offchain_attestations.tlen();

  while (i > 0) {
    cell offchain_attestation = offchain_attestations~tpop();
    (slice storage_attester, int timestamp) = __get_offchain_attestation_data(offchain_attestation);

    if (delegate_mode & ~(equal_slices(storage_attester, current_attester))) {
      throw(error::attestation_wrong_attester);
    }

    _revoke_offchain(offchain_attestation_ids~tpop(), offchain_attestation, reasons~tpop(), delegate_mode, sender_address, 0);
    i = i - 1;
  }
}
