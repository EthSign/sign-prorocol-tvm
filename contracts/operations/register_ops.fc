() _register(cell _schema) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

 (slice registrant, int registrant_pubkey, int revocable, int data_location, int max_valid_for, int timestamp, int data, int schema_counter_id) = __get_schema_data(_schema);
 
  cell c1 = begin_cell()
    .store_uint(data, 256)
    .end_cell();
  cell schema = begin_cell()
    .store_slice(registrant)
    .store_uint(registrant_pubkey, 256)
    .store_uint(revocable, 1)
    .store_uint(data_location, 2)
    .store_uint(max_valid_for, 32)
    .store_uint(timestamp, 32)
    .store_uint(schema_counter, 64)
    .store_ref(c1)
    .end_cell();

  __deploy_contract(schema_code, schema, empty_cell(), 0);

  save_data(version, admin_address, paused, schema_counter + 1, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, attestation_offchain_code, schema_code);

  return ();
}

;; =============== register =============================

() register(cell schema, slice delegate_signature) impure {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  (slice registrant, int registrant_pubkey, int revocable, int data_location, int max_valid_for, int timestamp, int data, int schema_counter_id) = __get_schema_data(schema);

  if (delegate_mode) {
    __check_delegation_signature(registrant_pubkey, get_delegated_register_hash(schema), delegate_signature);
  } else {
    if (~(equal_slices(registrant, my_address()))) {
      throw(error::schema_wrong_registrant);
    }
  }
  
  _register(schema);

  return ();
}

() register_batch(tuple schemas, slice delegate_signature) impure {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;
  cell firstSchema = schemas~tpop();
  (slice registrant, int registrant_pubkey, int revocable, int data_location, int max_valid_for, int timestamp, int data, int schema_counter_id) = __get_schema_data(firstSchema);

  if (delegate_mode) {
    __check_delegation_signature(registrant_pubkey, get_delegated_register_batch_hash(schemas, schemas.tlen()), delegate_signature);
  } else {
    if (~(equal_slices(registrant, my_address()))) {
      throw(error::schema_wrong_registrant);
    }
  }

  tuple schema_ids = empty_tuple();

  if (~(cell::is_empty(firstSchema))) {
    _register(firstSchema);
  }

  int i = schemas.tlen();

  while (i > 0) {
    cell schema = schemas~tpop();

    _register(schema);
    i = i - 1;
  }

  return ();
}
