#include "imports/stdlib.fc";

(cell) compose_hook(slice recipient, int op, int query_id, cell body) {
  return begin_cell()
    .store_slice(recipient)
    .store_uint(op, 32)
    .store_uint(query_id, 64)
    .store_ref(body)
  .end_cell();
}

(slice, int, int, cell) get_hook_data(cell hook) {
  slice s = hook.begin_parse();
  slice recipient = s~load_msg_addr();
  int op = s~load_uint(32);
  int query_id = s~load_uint(64);
  cell body = s~load_ref();

  return (recipient, op, query_id, body);
}

(cell) compose_schema_init(slice sp_address, int schema_id) {
  return begin_cell()
    .store_slice("")
    .store_uint(0, 256)
    .store_uint(0, 1)
    .store_uint(0, 2)
    .store_uint(0, 32)
    .store_uint(0, 32)
    .store_uint(schema_id, 64)
    .store_ref(
      begin_cell()
        .store_uint(0, 8)
        .store_slice("")
        .end_cell()
    )
    .store_ref(
      begin_cell()
        .store_slice(sp_address)
        .store_ref(empty_cell())
        .end_cell()
    )
    .end_cell();
}

(cell) compose_attestation_init(slice sp_address, int schema_id, int attestation_id) impure {
  slice schema_address = calculate_address(compose_schema_init(sp_address, schema_id));
  var c2 = begin_cell()
    .store_uint(0, 8)
    .store_slice("")
    .store_uint(schema_id, 64)
    .store_uint(0, 64)
    .store_uint(attestation_id, 64)
    .store_slice(sp_address)
    .store_uint(0, 1)
    .store_uint(0, 8)
    .store_slice("")
    .end_cell();
  var attestation_data = begin_cell()
    .store_slice(schema_address)
    .store_slice("")
    .store_slice("")
    .store_uint(0, 32)
    .store_uint(0, 32)
    .store_uint(0, 256)
    .store_uint(0, 32)
    .store_uint(0, 2)
    .store_uint(0, 1)
    .store_ref(c2)
    .store_ref(empty_cell())
    .end_cell();

  return attestation_data;
}
