const int min_tons_for_storage = 10000000; ;; 0.01 TON
const int gas_consumption = 20000000; ;; 0.02 TON
const int master_contract_storage_fee = 500000; ;; 0.005 TON

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> tuple cast_to_tuple (X x) asm "NOP";
forall X -> int cast_to_int (X x) asm "NOP";

;; =============== sub-contract utils =============================
builder store_withdraw_completed(builder b) inline {
    return b.store_uint(7614653257073527469736132165096662684165476, 144);
}

() send_msg(int bounceable?, slice recipient, int value, int mode) impure {
    send_raw_message(begin_cell()
        .store_uint(bounceable? ? 0x18 : 0x10, 6)
        .store_slice(recipient)
        .store_coins(value)
        .store_uint(0, 107)
    .end_cell(), mode);
}

() send_msg_with_body(int bounceable?, slice recipient, int value, cell body, int mode) impure {
    send_raw_message(begin_cell()
        .store_uint(bounceable? ? 0x18 : 0x10, 6)
        .store_slice(recipient)
        .store_coins(value)
        .store_uint(1, 107)
        .store_ref(body)
    .end_cell(), mode);
}

() send_msg_with_body_and_init(int bounceable?, slice recipient, int value, cell body, cell init, int mode) impure {
    send_raw_message(begin_cell()
        .store_uint(bounceable? ? 0x18 : 0x10, 6)
        .store_slice(recipient)
        .store_coins(value)
        .store_uint(3, 107)
        .store_ref(init)
        .store_ref(body)
    .end_cell(), mode);
}

(cell) compose_body(int op, int query_id, builder body) inline {
    return begin_cell()
        .store_uint(op, 32)
        .store_uint(query_id, 64)
        .store_builder(body)
    .end_cell();
}

(cell) compose_init(cell code, cell data) inline {
    return begin_cell()
        .store_uint(6, 5)
        .store_ref(code)
        .store_ref(data)
    .end_cell();
}

(slice) calculate_address(cell init) inline {
    return begin_cell()
        .store_uint(0x400, 11)
        .store_uint(cell_hash(init), 256)
    .end_cell().begin_parse();
}

cell __tuple_to_cell(tuple t) {
  var c = begin_cell();
  int i = t.tlen();

  while (i > 0) {
    cell e = t~tpop();

    c = c.store_ref(e);
    i = i - 1;
  }

  return c.end_cell();
}

() __check_delegation_signature(int delegate_attester, int hash, slice delegate_signature) impure inline {
  if (check_signature(hash, delegate_signature, delegate_attester) != 0) {
    throw(error::invalid_delegate_signature);
  }
}

() send_hook(cell hook) {
  var ds = hook.begin_parse();
  slice hook_recipient = ds~load_msg_addr();
  int hook_op = ds~load_uint(32);
  int hook_query_id = ds~load_uint(64);
  cell hook_body = ds~load_ref();
  cell body = compose_body(hook_op, hook_query_id, begin_cell().store_ref(hook_body));
  
  send_msg_with_body(0, hook_recipient, 0, body, 0);
}