#pragma version >=0.3.0;

#include "../node_modules/@ston-fi/funcbox/autoload.fc";

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";
#include "imports/definitions_helpers.fc";
#include "imports/definitions.fc";

#include "operations/hash_ops.fc";
#include "operations/helper_ops.fc";
#include "operations/register_ops.fc";
#include "operations/attest_ops.fc";
#include "operations/revoke_ops.fc";

;; =============== storage =============================

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();

  version = ds~load_uint(64);
  admin_address = ds~load_msg_addr();
  paused = ds~load_uint(1);
  schema_counter = ds~load_uint(64);
  attestation_counter = ds~load_uint(64);
  initial_schema_counter = ds~load_uint(64);
  initial_attestation_counter = ds~load_uint(64);
  attestation_code = ds~load_ref();
  attestation_offchain_code = ds~load_ref();
  schema_code = ds~load_ref();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data (int version, slice admin_address, int paused, int schema_counter, int attestation_counter, int initial_schema_counter, int initial_attestation_counter, cell attestation_code, cell attestation_offchain_code, cell schema_code) impure {
  cell data = begin_cell()
    .store_uint(version, 64)
    .store_slice(admin_address)
    .store_uint(paused, 1)
    .store_uint(schema_counter, 64)
    .store_uint(attestation_counter, 64)
    .store_uint(initial_schema_counter, 64)
    .store_uint(initial_attestation_counter, 64)
    .store_ref(attestation_code)
    .store_ref(attestation_offchain_code)
    .store_ref(schema_code)
    .end_cell();
    
  set_data(data);
}

;; =============== messages =============================

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int balance, int msg_value, cell in_msg_cell, slice in_msg) {
  if (in_msg.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  int flags = in_msg~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  int op = in_msg~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
  slice sender_address = in_msg~load_msg_addr();

  if (op == op::change_admin) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));

    slice new_admin_address = in_msg~load_msg_addr();

    throw_if(error::invalid_message_params, new_admin_address.slice_empty?());

    save_data(version, new_admin_address, paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, attestation_offchain_code, schema_code);
    return ();
  }
  
  if (op == op::change_code) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));

    int code_type = in_msg~load_uint(32);
    cell new_code = in_msg~load_ref();

    throw_if(error::invalid_message_params, equal_cells(new_code, empty_cell()));

    if (code_type == code_type::attestation) {
      save_data(version, admin_address, paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, new_code, attestation_offchain_code, schema_code);
    }
    
    if (code_type == code_type::attestation_offchain) {
      save_data(version, admin_address, paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, new_code, schema_code);
    }
    
    if (code_type == code_type::schema) {
      save_data(version, admin_address, paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, attestation_offchain_code, new_code);
    }

    if (code_type == code_type::sp) {
      set_code(new_code);
      save_data(version, admin_address, paused, schema_counter, attestation_counter, schema_counter, attestation_counter, attestation_code, attestation_offchain_code, schema_code);
    }

    return ();
  }

  if (op == op::change_version) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));

    int new_version = in_msg~load_uint(64);

    save_data(new_version, admin_address, paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, attestation_offchain_code, schema_code);

    return ();
  }

  if (op == op::change_paused) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));

    int _paused = in_msg~load_uint(1);

    throw_if(error::invalid_message_params, (_paused < 0) | (_paused > 1));

    save_data(version, admin_address, _paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, attestation_offchain_code, schema_code);

    return ();
  }

  if (op == op::withdraw) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, admin_address));

    int amount = in_msg~load_coins();

    throw_if(error::invalid_message_params, (balance - amount) < min_tons_for_storage());

    builder content = begin_cell().store_withdraw_completed();
    var body = begin_cell()
        .store_uint(0, 32)
        .store_builder(content)
        .end_cell();
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(sender_address)
      .store_coins(amount)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(body)
      .end_cell();

    send_raw_message(msg, 0);

    return ();
  }

  if (op == op::register) {
    var signature = in_msg~load_bits(512);
    cell schema = in_msg~load_ref();

    register(schema, signature);

    return ();
  }

  if (op == op::attest) {
    var signature = in_msg~load_bits(512);
    cell attestation = in_msg~load_ref();
    cell schema = in_msg~load_ref();

    attest(attestation, schema, signature, sender_address);

    return ();
  }
  
  if (op == op::attest_with_fees) {
    var signature = in_msg~load_bits(512);
    cell attestation = in_msg~load_ref();
    cell schema = in_msg~load_ref();
    (in_msg, int fees) = load_coins(in_msg);

    attest_with_fees(attestation, schema, fees, signature, sender_address);

    return ();
  }
  
  if (op == op::attest_offchain) {
    var signature = in_msg~load_bits(512);
    cell offchain_attestation = in_msg~load_ref();

    var c1 = in_msg~load_ref().begin_parse();
    slice delegate_attester = c1~load_msg_addr();

    attest_offchain(offchain_attestation, delegate_attester, signature, sender_address);

    return ();
  }
  
  if (op == op::revoke) {
    var signature = in_msg~load_bits(512);
    slice ds = in_msg~load_ref().begin_parse();
    slice attestation_id = ds~load_msg_addr();
    int reason = ds~load_uint(256);

    cell attestation = in_msg~load_ref();
    cell schema = in_msg~load_ref();

    revoke(attestation_id, attestation, schema,  reason, signature, sender_address);

    return ();
  }
  
  if (op == op::revoke_with_fees) {
    var signature = in_msg~load_bits(512);
    slice ds = in_msg~load_ref().begin_parse();
    slice attestation_id = ds~load_msg_addr();
    int reason = ds~load_uint(256);

    cell attestation = in_msg~load_ref();
    cell schema = in_msg~load_ref();
    (in_msg, int fees) = load_coins(in_msg);

    revoke_with_fees(attestation_id, attestation, schema,  reason, fees, signature, sender_address);

    return ();
  }
  
  if (op == op::revoke_offchain) {
    var signature = in_msg~load_bits(512);
    slice ds = in_msg~load_ref().begin_parse();
    slice attestation_id = ds~load_msg_addr();
    int reason = ds~load_uint(256);

    cell attestation = in_msg~load_ref();

    revoke_offchain(attestation_id, attestation, reason, signature, sender_address);

    return ();
  }
  
  throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== getter functions =============================

int get_paused() method_id {
  load_data();

  return paused;
}

int get_version() method_id {
  load_data();

  return version;
}

int get_schema_counter() method_id {
  load_data();

  return schema_counter;
}

int get_attestation_counter() method_id {
  load_data();
  
  return attestation_counter;
}

slice get_schema_id(cell schema) method_id {
  load_data();
  cell state_init = begin_cell()
    .store_uint(0, 1) ;; split_depth:(Maybe (## 5))
    .store_uint(0, 1) ;; special:(Maybe TickTock)
    .store_uint(1, 1) ;; (Maybe ^Cell)
    .store_ref(schema_code)
    .store_uint(1, 1) ;; (Maybe ^Cell)
    .store_ref(schema)
    .store_uint(0, 1) ;; (HashmapE 512 SimpleLib)
    .end_cell();
  return calc_address(0, state_init);
}

slice get_attestation_id(cell attestation) method_id {
  load_data();
  cell state_init = begin_cell()
    .store_uint(0, 1) ;; split_depth:(Maybe (## 5))
    .store_uint(0, 1) ;; special:(Maybe TickTock)
    .store_uint(1, 1) ;; (Maybe ^Cell)
    .store_ref(attestation_code)
    .store_uint(1, 1) ;; (Maybe ^Cell)
    .store_ref(attestation)
    .store_uint(0, 1) ;; (HashmapE 512 SimpleLib)
    .end_cell();
  return calc_address(0, state_init);
}

slice get_attestation_offchain_id(cell attestation_offchain) method_id {
  load_data();
  cell state_init = begin_cell()
    .store_uint(0, 1) ;; split_depth:(Maybe (## 5))
    .store_uint(0, 1) ;; special:(Maybe TickTock)
    .store_uint(1, 1) ;; (Maybe ^Cell)
    .store_ref(attestation_offchain_code)
    .store_uint(1, 1) ;; (Maybe ^Cell)
    .store_ref(attestation_offchain)
    .store_uint(0, 1) ;; (HashmapE 512 SimpleLib)
    .end_cell();
  return calc_address(0, state_init);
}
