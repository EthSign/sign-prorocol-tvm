#pragma version >=0.3.0;

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";

#include "../node_modules/@ston-fi/funcbox/autoload.fc";

int min_tons_for_storage() asm "10000000 PUSHINT"; ;; 0.01 TON
int gas_consumption() asm "2000000 PUSHINT"; ;; 0.02 TON

;; =============== storage =============================

global int version;
global slice admin_address;
global int paused;
global int schema_counter;
global int attestation_counter;
global int initial_schema_counter;
global int initial_attestation_counter;
global cell attestation_code;
global cell schema_code;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();

  version = ds~load_uint(64);
  admin_address = ds~load_msg_addr();
  paused = ds~load_uint(1);
  schema_counter = ds~load_uint(64);
  attestation_counter = ds~load_uint(64);
  initial_schema_counter = ds~load_uint(64);
  initial_attestation_counter = ds~load_uint(64);
  attestation_code = ds~load_ref();
  schema_code = ds~load_ref();

  ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data (int version, slice admin_address, int paused, int schema_counter, int attestation_counter, int initial_schema_counter, int initial_attestation_counter, cell attestation_code, cell schema_code) impure {
  set_data(
    begin_cell()
      .store_uint(version, 64)
      .store_slice(admin_address)
      .store_uint(paused, 1)
      .store_uint(schema_counter, 64)
      .store_uint(attestation_counter, 64)
      .store_uint(initial_schema_counter, 64)
      .store_uint(initial_attestation_counter, 64)
      .store_uint(version, 64)
      .store_ref(attestation_code)
      .store_ref(schema_code)
      .end_cell()
  );
}

;; =============== helper functions =============================

(slice, slice, int, int, slice, int, slice, int, int, tuple, int, int, int, int) __get_attestation_data(cell _attestation) {
  slice attestation_slice = _attestation.begin_parse();

  slice schema_id = attestation_slice~load_msg_addr();
  slice linked_attestation_id = attestation_slice~load_msg_addr();
  int attest_timestamp = attestation_slice~load_uint(64);
  int revoke_timestamp = attestation_slice~load_uint(64);
  slice attester = attestation_slice~load_msg_addr();
  int valid_until = attestation_slice~load_uint(64);
  slice data_location = attestation_slice~load_msg_addr();
  int revoked = attestation_slice~load_uint(1);
  int recipients_len = attestation_slice~load_uint(64);
  tuple recipients = empty_tuple();

  int i = recipients_len;
  slice recipient = "";

  while (i > 0) {
    recipient = attestation_slice~load_msg_addr();
    
    recipients~tpush(recipient);

    i = i - 1;
  }

  int data = attestation_slice~load_uint(64);
  int schema_counter_id = attestation_slice~load_uint(64);
  int linked_attestation_counter_id = attestation_slice~load_uint(64);
  int attestation_counter_id = attestation_slice~load_uint(64);

  attestation_slice.end_parse();

  return (schema_id, linked_attestation_id, attest_timestamp, revoke_timestamp, attester, valid_until, data_location, revoked, recipients_len, recipients, data, schema_counter_id, linked_attestation_counter_id, attestation_counter_id);
}

(slice, int) __get_offchain_attestation_data(cell _offchain_attestation) {
  slice offchain_attestation_slice = _offchain_attestation.begin_parse();

  slice attester = offchain_attestation_slice~load_msg_addr();
  int timestamp = offchain_attestation_slice~load_uint(64);

  offchain_attestation_slice.end_parse();

  return (attester, timestamp);
}

(slice, int, slice, int, int, int, int) __get_schema_data(cell _schema) {

  slice schema_slice = _schema.begin_parse();

  slice registrant = schema_slice~load_msg_addr();
  int revocable = schema_slice~load_uint(1);
  slice data_location = schema_slice~load_msg_addr();
  int max_valid_for = schema_slice~load_uint(64);
  ;; hook = ds~load_ref(); TODO: implement hooks
  int timestamp = schema_slice~load_uint(64);
  int data = schema_slice~load_uint(64);
  int schema_counter_id = schema_slice~load_uint(64);

  schema_slice.end_parse();

  return (registrant, revocable, data_location, max_valid_for, timestamp, data, schema_counter_id);
}

slice __deploy_contract (cell code, cell data, cell master_msg) {
  cell stateInit = begin_cell()
    .store_uint(0, 1)
    .store_uint(0, 1)
    .store_uint(1, 1)
    .store_ref(code)
    .store_uint(1, 1)
    .store_ref(data)
    .store_uint(0, 1)
    .end_cell();
slice address = generate_internal_address(0, stateInit);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(address)
    .store_coins(gas_consumption())
    .store_uint(0, 1 + 4 + 4 + 64 + 32)
    .store_uint(1, 1)
    .store_uint(1, 1)
    .store_ref(stateInit)
    .store_uint(1, 1)
    .store_ref(master_msg);
  
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

  return address;
}

cell __tuple_to_cell(tuple t) {
  var c = begin_cell();
  int i = t.tlen();

  while (i > 0) {
    cell e = t~tpop();

    c = c.store_ref(e);
    i = i - 1;
  }

  return c.end_cell();
}

() __check_delegation_signature(slice delegateAttester, int hash, slice delegateSignature) impure inline {
  if (check_signature(hash, delegateSignature, delegateAttester.cast_to_int()) == 0) {
    throw(error::invalid_delegate_signature);
  }
}

int __schema_exists(int schema_counter_id, int schema_timestamp) impure inline {
  return (schema_counter_id < schema_counter) & (schema_counter_id > 0) & (schema_timestamp > 0);
}

int __attestation_exists(int attestation_counter_id) impure inline {
  return attestation_counter_id < attestation_counter;
}

int __offchain_attestation_exists(int attestation_timestamp) impure inline {
  return attestation_timestamp != 0;
}

slice _register(cell _schema, cell master_msg) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

 (slice registrant, int revocable, slice data_location, int max_valid_for, int timestamp, int data, int schema_counter_id) = __get_schema_data(_schema);
 
  cell schema = begin_cell()
    .store_slice(registrant)
    .store_uint(revocable, 1)
    .store_slice(data_location)
    .store_uint(max_valid_for, 64)
    .store_uint(now(), 64)
    .store_uint(data, 64)
    .store_uint(schema_counter_id, 64)
    .store_slice(my_address())
    .store_ref(schema_code)
    .end_cell();

  slice schema_address = __deploy_contract(schema_code, schema, master_msg);

  console::log_raw("SCHEMA_REGISTERED");
  console::log_raw(schema_address);

  save_data(version, admin_address, paused, schema_counter + 1, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, schema_code);

  return schema_address;
}

(slice, slice) _attest(cell _attestation, cell _schema, slice indexing_key, int delegate_mode, slice sender_address, cell master_msg) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }
  
  (
    slice schema_id, 
    slice linked_attestation_id, 
    int attest_timestamp, 
    int revoke_timestamp, 
    slice attester, 
    int valid_until, 
    slice data_location, 
    int revoked, 
    int recipients_len, 
    tuple recipients, 
    int _data, 
    int schema_counter_id, 
    int linked_attestation_counter_id, 
    int attestation_counter_id
  ) = __get_attestation_data(_attestation);
  (
    slice registrant, 
    int revocable, 
    slice schema_data_location, 
    int _max_valid_for, 
    int schema_timestamp, 
    int schema_data, 
    int schema_counter_id
  ) = __get_schema_data(_schema);
 
  if (delegate_mode & (attester.cast_to_int() == sender_address.cast_to_int())) {
    throw(error::attestation_wrong_attester);
  }

  if (linked_attestation_counter_id > 0 & ~(__attestation_exists(linked_attestation_counter_id))) {
    throw(error::attestation_nonexistent);
  }

  if (~(__schema_exists(schema_counter_id, schema_timestamp))) {
    throw(error::schema_nonexistent);
  }

  if (_max_valid_for > 0) {
    int attestation_valid_for = valid_until - now();

    if (_max_valid_for < attestation_valid_for) {
      throw(error::attestation_invalid_duration);
    }
  }
  
  slice attestation_address = __deploy_contract(schema_code, _schema, master_msg);

  console::log_raw("ATTESTATION_MADE");
  console::log_raw(attestation_address);

  return (schema_id, attestation_address);
}

() _attest_offchain(cell offchain_attestation, slice attester) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

  (slice offchain_attestation_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, int data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(offchain_attestation);

  if (__offchain_attestation_exists(attest_timestamp)) {
    throw(error::offchain_attestation_exists);
  }

  console::log_raw("OFFCHAIN_ATTESTATION_MADE");
  console::log_raw(offchain_attestation_id);
  
  return ();
}

slice _revoke(slice attestation_id, cell attestation, cell schema, slice reason, int delegate_mode, slice sender_address, int query_id) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

  (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, int data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

  if (attester.slice_empty?()) {
    throw(error::attestation_nonexistent);
  }

  if (delegate_mode != 1 & ~(equal_slices(attester, sender_address))) {
    throw(error::attestation_wrong_attester);
  }

  (slice registrant, int revocable, slice schema_data_location, int max_valid_for, int schema_timestamp, int schema_data, int schema_counter_id) = __get_schema_data(schema);

  if (revocable != 1) {
    throw(error::attestation_irrevocable);
  }

  if (revoked) {
    throw(error::attestation_already_revoked);
  }

  var msg_body = begin_cell()
      .store_uint(op::revoke_attestation, 32)
      .store_uint(query_id, 64)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(attestation_id)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 0);

  console::log_raw("ATTESTATION_REVOKED");
  console::log_raw(attestation_id);
  console::log_raw(reason);
      
  return schema_id;
}

() _revoke_offchain(slice offchain_attestation_id, cell offchain_attestation, slice reason, int delegate_mode, slice sender_address, int query_id) impure {
  load_data();

  if (paused) {
    throw(error::paused);
  }

  (slice attester, int timestamp) = __get_offchain_attestation_data(offchain_attestation);

  if (~(__offchain_attestation_exists(timestamp))) {
    throw(error::offchain_attestation_nonexistent);
  }

  if (delegate_mode != 1 & equal_slices(attester, sender_address)) {
    throw(error::attestation_wrong_attester);
  }

  if (timestamp == 1) {
    throw(error::offchain_attestation_already_revoked);
  }

  var msg_body = begin_cell()
      .store_uint(op::revoke_attestation, 32)
      .store_uint(query_id, 64)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(offchain_attestation_id)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 0);

  console::log_raw("OFFCHAIN_ATTESTATION_REVOKED");
  console::log_raw(offchain_attestation_id);
  console::log_raw(reason);

  return ();
}

;; =============== hashing functions =============================

int get_delegated_register_hash(cell schema) inline_ref {
  cell data_cell = begin_cell()
    .store_uint(action::register, 32)
    .store_ref(schema)
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_register_batch_hash(tuple schemas, int schemas_len) inline_ref {
  cell data_cell = begin_cell()
    .store_uint(action::register_batch, 32)
    .store_ref(__tuple_to_cell(schemas))
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_attest_hash(cell attestation) inline_ref {
  cell data_cell = begin_cell()
    .store_uint(action::attest, 32)
    .store_ref(attestation)
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_attest_batch_hash(tuple attestations, int attestations_len) inline_ref {
  cell data_cell = begin_cell()
    .store_uint(action::attest_batch, 32)
    .store_ref(__tuple_to_cell(attestations))
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_offchain_attest_hash(slice offchain_attestation_id) inline_ref {
  cell data_cell = begin_cell()
    .store_uint(action::attest_offchain, 32)
    .store_slice(offchain_attestation_id)
    .end_cell();

  return cell_hash(data_cell);
}

int get_delegated_offchain_attest_batch_hash(tuple offchain_attestation_ids, int offchain_attestation_ids_len) inline_ref {
  cell data_cell = begin_cell()
    .store_uint(action::attest_offchain_batch, 32)
    .store_ref(__tuple_to_cell(offchain_attestation_ids))
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_revoke_hash(slice attestation_id, slice reason) inline_ref {
  cell attestation_id_and_reason_cell = begin_cell()
    .store_slice(attestation_id)
    .store_slice(reason)
    .end_cell();
  cell data_cell = begin_cell()
    .store_uint(action::revoke, 32)
    .store_ref(attestation_id_and_reason_cell)
    .end_cell();
  
  return cell_hash(data_cell);
}

int get_delegated_revoke_batch_hash(tuple attestation_ids, tuple reasons) inline_ref {
  cell attestation_ids_cell = __tuple_to_cell(attestation_ids);
  cell reasons_cell = __tuple_to_cell(reasons);

  cell attestation_ids_and_reasons_cell = begin_cell()
    .store_ref(attestation_ids_cell)
    .store_ref(reasons_cell)
    .end_cell();
  cell data_cell = begin_cell()
    .store_uint(action::revoke_batch, 32)
    .store_ref(attestation_ids_and_reasons_cell)
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_offchain_revoke_hash(slice offchain_attestation_id, slice reason) inline_ref {
  cell offchain_attestation_id_and_reason_cell = begin_cell()
    .store_slice(offchain_attestation_id)
    .store_slice(reason)
    .end_cell();
  cell data_cell = begin_cell()
    .store_uint(action::revoke_offchain, 32)
    .store_ref(offchain_attestation_id_and_reason_cell)
    .end_cell();
    
  return cell_hash(data_cell);
}

int get_delegated_offchain_revoke_batch_hash(tuple offchain_attestation_ids, tuple reasons) inline_ref {
  cell offchain_attestation_ids_cell = __tuple_to_cell(offchain_attestation_ids);
  cell reasons_cell = __tuple_to_cell(reasons);

  cell offchain_attestation_ids_and_reasons_cell = begin_cell()
    .store_ref(offchain_attestation_ids_cell)
    .store_ref(reasons_cell)
    .end_cell();
  cell data_cell = begin_cell()
    .store_uint(action::revoke_offchain_batch, 32)
    .store_ref(offchain_attestation_ids_and_reasons_cell)
    .end_cell();
    
  return cell_hash(data_cell);
}

;; =============== messages =============================

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
  slice sender_address = cs~load_msg_addr();

  if (op == op::change_admin) {
    throw_unless(73, equal_slices(sender_address, admin_address));

    slice new_admin_address = in_msg_body~load_msg_addr();

    save_data(version, new_admin_address, paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, schema_code);
    return ();
  }

  throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== external functions =============================

() set_pause(int _paused) method_id {
  load_data();

  save_data(version, admin_address, _paused, schema_counter, attestation_counter, initial_schema_counter, initial_attestation_counter, attestation_code, schema_code);
}

slice register(cell schema, slice delegate_signature) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  (slice registrant, int revocable, slice data_location, int max_valid_for, int timestamp, int data, int schema_counter_id) = __get_schema_data(schema);

  if (delegate_mode) {
    __check_delegation_signature(registrant, get_delegated_register_hash(schema), delegate_signature);
  } else {
    if (~(equal_slices(registrant, my_address()))) {
      throw(error::schema_wrong_registrant);
    }
  }
  
  return _register(schema, empty_cell());
}

tuple register_batch(tuple schemas, slice delegate_signature) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  (slice registrant, int revocable, slice data_location, int max_valid_for, int timestamp, int data, int schema_counter_id) = __get_schema_data(schemas~tpop());

  if (delegate_mode) {
    __check_delegation_signature(registrant, get_delegated_register_batch_hash(schemas, schemas.tlen()), delegate_signature);
  } else {
    if (~(equal_slices(registrant, my_address()))) {
      throw(error::schema_wrong_registrant);
    }
  }

  tuple schema_ids = empty_tuple();
  int i = schemas.tlen();

  while (i > 0) {
    cell schema = schemas~tpop();

    schema_ids~tpush(_register(schema, empty_cell()));
    i = i - 1;
  }

  return schema_ids;
}

slice attest(cell attestation, cell schema, slice indexing_key, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, int data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

  if (delegate_mode) {
    __check_delegation_signature(attester, get_delegated_attest_hash(attestation), delegate_signature);
  }

  (slice schema_id, slice attestation_id) = _attest(attestation, schema, indexing_key, delegate_mode, sender_address, empty_cell());


  return attestation_id;
}

tuple attest_batch(tuple attestations, tuple schemas, tuple indexing_keys, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;
  tuple attestation_ids = empty_tuple();

  (slice _schema_id, slice _linked_attestation_id, int _attest_timestamp, int _revoke_timestamp, slice _attester, int _valid_until, slice _data_location, int _revoked, int _recipients_len, tuple _recipients, int _data, int _schema_counter_id, int _linked_attestation_counter_id, int _attestation_counter_id) = __get_attestation_data(attestations~tpop());

  if (delegate_mode) {
    __check_delegation_signature(_attester, get_delegated_attest_batch_hash(attestations, attestations.tlen()), delegate_signature);
  }

  int i = attestations.tlen();

  while (i > 0) {
    cell attestation = attestations~tpop();

    (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, int data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

    if (delegate_mode & ~(equal_slices(attester, _attester))) {
      throw(error::attestation_wrong_attester);
    }

    (schema_id, slice attestation_id) = _attest(attestation, schemas~tpop(), indexing_keys~tpop(), delegate_mode, sender_address, empty_cell());

    attestation_ids~tpush(attestation_id);
    i = i - 1;
  }

  return attestation_ids;
}

slice attest_with_fees(cell attestation, cell schema, int resolver_fees, slice indexing_key, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;

  (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, int data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

  if (delegate_mode) {
    __check_delegation_signature(attester, get_delegated_attest_hash(attestation), delegate_signature);
  }

  (schema_id, slice attestation_id) = _attest(attestation, schema, indexing_key, delegate_mode, sender_address, empty_cell());

  return attestation_id;
}

tuple attest_batch_with_fees(tuple attestations, tuple schemas, tuple resolver_fees, tuple indexing_keys, slice delegate_signature, slice extra_data, slice sender_address) method_id {
  int delegate_mode = delegate_signature.slice_empty?() ? 0 : 1;
  tuple attestation_ids = empty_tuple();

  (slice _schema_id, slice _linked_attestation_id, int _attest_timestamp, int _revoke_timestamp, slice _attester, int _valid_until, slice _data_location, int _revoked, int _recipients_len, tuple _recipients, int _data, int _schema_counter_id, int _linked_attestation_counter_id, int _attestation_counter_id) = __get_attestation_data(attestations~tpop());

  if (delegate_mode) {
    __check_delegation_signature(_attester, get_delegated_attest_batch_hash(attestations, attestations.tlen()), delegate_signature);
  }

  int i = attestations.tlen();

  while (i > 0) {
    cell attestation = attestations~tpop();

    (slice schema_id, slice linked_attestation_id, int attest_timestamp, int revoke_timestamp, slice attester, int valid_until, slice data_location, int revoked, int recipients_len, tuple recipients, int data, int schema_counter_id, int linked_attestation_counter_id, int attestation_counter_id) = __get_attestation_data(attestation);

    if (delegate_mode & ~(equal_slices(attester, _attester))) {
      throw(error::attestation_wrong_attester);
    }

    (schema_id, slice attestation_id) = _attest(attestation, schemas~tpop(), indexing_keys~tpop(), delegate_mode, sender_address, empty_cell());

    attestation_ids~tpush(attestation_id);
    i = i - 1;
  }

  return attestation_ids;
}


int get_version() method_id {
  load_data();

  return version;
}

int get_schema_counter() method_id {
  load_data();

  return schema_counter;
}

int get_attestation_counter() method_id {
  load_data();
  
  return attestation_counter;
}
