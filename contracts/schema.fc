#pragma version >=0.3.0;

#include "../node_modules/@ston-fi/funcbox/autoload.fc";

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/definitions_helpers.fc";
#include "imports/utils.fc";

#include "operations/hash_ops.fc";
#include "operations/helper_ops.fc";
#include "operations/schema_ops.fc";
;; =============== storage =============================

global slice registrant;
global int registrant_pubkey;
global int revocable;
global int data_location;
global int max_valid_for;
global int timestamp;
global int data_len;
global slice data;
global int schema_id;
global slice sp_address;
global cell attestation_code;

cell get_schema_data() method_id;

() load_data() impure {
  var ds = get_data().begin_parse();

  registrant = ds~load_msg_addr();
  registrant_pubkey = ds~load_uint(256);
  revocable = ds~load_uint(1);
  data_location = ds~load_uint(2);
  max_valid_for = ds~load_uint(32);
  timestamp = ds~load_uint(32);
  schema_id = ds~load_uint(64);
  
  slice s1 = ds~load_ref().begin_parse();
  data_len = s1~load_uint(8);
  data = s1~load_bits(data_len);

  slice s2 = ds~load_ref().begin_parse();
  sp_address = s2~load_msg_addr();
  attestation_code = s2~load_ref();
}

;; =============== utils =============================

(cell) compose_schema (slice _registrant, int _registrant_pubkey, int _revocable, int _data_location, int _max_valid_for, int _timestamp, int _data_len, slice _data, int _schema_id, slice _sp_address, cell _attestation_code) {
  cell schema = begin_cell()
    .store_slice(_registrant)
    .store_uint(_registrant_pubkey, 256)
    .store_uint(_revocable, 1)
    .store_uint(_data_location, 2)
    .store_uint(_max_valid_for, 32)
    .store_uint(_timestamp, 32)
    .store_uint(_schema_id, 64)
    .store_ref(
      begin_cell()
        .store_uint(_data_len, 8)
        .store_slice(_data)
        .end_cell()
    )
    .store_ref(
      begin_cell()
        .store_slice(_sp_address)
        .store_ref(_attestation_code)
        .end_cell()
    )
    .end_cell();

  return schema;
}

;; ================================================

() save_data (slice _registrant, int _registrant_pubkey, int _revocable, int _data_location, int _max_valid_for, int _timestamp, int _data_len, slice _data, int _schema_id, slice _sp_address, cell _attestation_code) impure {
  cell schema = compose_schema(
    _registrant,
    _registrant_pubkey,
    _revocable,
    _data_location,
    _max_valid_for,
    _timestamp,
    _data_len,
    _data,
    _schema_id,
    _sp_address,
    _attestation_code
  );

  set_data(schema);
}

;; =============== messages =============================

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg) {
  if (in_msg.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice in_msg_full_slice = in_msg_full.begin_parse();
  int flags = in_msg_full_slice~load_uint(4);
  slice sender_address = in_msg_full_slice~load_msg_addr();

  if (flags & 1) {
    in_msg~skip_bits(32);  ;;0xFFFFFFFF

    int bounced_op = in_msg~load_uint(32);
    int bounced_query_id = in_msg~load_uint(64);
  
    return ();
  }

  int op = in_msg~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::attest) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, sp_address));

    cell attestation = in_msg~load_ref();
    var signature = in_msg~load_bits(512);
    slice attester = in_msg~load_msg_addr();
    int fees = in_msg~load_coins();
    int attestation_counter = in_msg~load_uint(64);
    int schema_counter = in_msg~load_uint(64);
    int has_hook = in_msg~load_uint(1);

    attest(attestation, max_valid_for, attestation_code, fees, attestation_counter, schema_counter, signature, attester);

    if (has_hook) {
      cell schema = get_schema_data();
      cell body = compose_body(
        op::call_hook_from_schema,
        query_id,
        begin_cell()
          .store_ref(schema)
          .store_ref(in_msg~load_ref())
      );
      
      send_msg_with_body(1, sp_address, 0, body, 1);
    }

    return ();
  }

  throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== getters =============================

cell get_schema_data() method_id {
  load_data();
  cell schema = compose_schema(
    registrant,
    registrant_pubkey,
    revocable,
    data_location,
    max_valid_for,
    timestamp,
    data_len,
    data,
    schema_id,
    sp_address,
    attestation_code
  );

  return schema;
}
