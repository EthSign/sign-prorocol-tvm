#pragma version >=0.3.0;

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";

#include "../node_modules/@ston-fi/funcbox/autoload.fc";

;; =============== storage =============================

global slice registrant;
global int registrant_pubkey;
global int revocable;
global int data_location;
global int max_valid_for;
;; global cell hook; TODO: implement hooks
global int timestamp;
global int data;
global int schema_counter_id;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();

  registrant = ds~load_msg_addr();
  registrant_pubkey = ds~load_uint(256);
  revocable = ds~load_uint(1);
  data_location = ds~load_uint(2);
  max_valid_for = ds~load_uint(32);
  ;; hook = ds~load_ref(); TODO: implement hooks
  timestamp = ds~load_uint(32);
  schema_counter_id = ds~load_uint(64);
  
  var s1 = ds~load_ref().begin_parse();
  data = s1~load_uint(256);
}

;; save_data stores storage variables as a cell into persistent storage
() save_data (slice _registrant, int _registrant_pubkey, int _revocable, int _data_location, int _max_valid_for, int _timestamp, int _data, int _schema_counter_id) impure {
  cell schema_data = begin_cell()
    .store_slice(_registrant)
    .store_uint(_registrant_pubkey, 256)
    .store_uint(_revocable, 1)
    .store_uint(_data_location, 2)
    .store_uint(_max_valid_for, 32)
    ;; .store_ref(hook) TODO: implement hooks
    .store_uint(_timestamp, 32)
    .store_uint(_schema_counter_id, 64)
    .store_ref(
      begin_cell()
        .store_uint(_data, 256)
        .end_cell()
    )
    .end_cell();

  set_data(schema_data);
}

;; =============== messages =============================

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
      return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
      return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== getters =============================

cell get_schema_data() method_id {
  load_data();
  
  cell schema_data = begin_cell()
    .store_slice(registrant)
    .store_uint(registrant_pubkey, 256)
    .store_uint(revocable, 1)
    .store_uint(data_location, 2)
    .store_uint(max_valid_for, 32)
    ;; .store_ref(hook) TODO: implement hooks
    .store_uint(timestamp, 32)
    .store_uint(schema_counter_id, 64)
    .store_ref(
      begin_cell()
        .store_uint(data, 256)
        .end_cell()
    )
    .end_cell();

  return schema_data;
}
