#pragma version >=0.3.0;

#include "../node_modules/@ston-fi/funcbox/autoload.fc";

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/definitions_helpers.fc";
#include "imports/utils.fc";

#include "operations/hash_ops.fc";
#include "operations/helper_ops.fc";
#include "operations/attestation_ops.fc";
;; =============== storage =============================

global slice schema_address;
global slice linked_attestation_address;
global int attest_timestamp;
global int revoke_timestamp;
global slice attester;
global int attester_pubkey;
global int valid_until;
global int data_location;
global int revoked;
global int recipients_len;
global tuple recipients;
global int data_len;
global slice data;
global int reason_len;
global slice reason;
global int schema_id;
global int linked_attestation_id;
global int attestation_id;
global int revocable;
global slice sp_address;

(cell) get_attestation_data() method_id;

() load_data() impure {
  var ds = get_data().begin_parse();

  schema_address = ds~load_msg_addr();
  linked_attestation_address = ds~load_msg_addr();
  attester = ds~load_msg_addr();
  attest_timestamp = ds~load_uint(32);
  revoke_timestamp = ds~load_uint(32);
  attester_pubkey = ds~load_uint(256);
  valid_until = ds~load_uint(32);
  data_location = ds~load_uint(2);
  revoked = ds~load_uint(1);

  slice s2 = ds~load_ref().begin_parse();
  data_len = s2~load_uint(8);
  data = s2~load_bits(data_len);
  schema_id = s2~load_uint(64);
  linked_attestation_id = s2~load_uint(64);
  attestation_id = s2~load_uint(64);
  sp_address = s2~load_msg_addr();
  revocable = s2~load_uint(1);
  reason_len = s2~load_uint(8);
  reason = s2~load_bits(reason_len);

  slice s3 = ds~load_ref().begin_parse();
  recipients_len = s3~load_uint(64);
  recipients = cast_to_tuple(s3~load_uint(1023));
}

;; =============== utils =============================

(cell) compose_attestation(slice _schema_address, slice _linked_attestation_address, int _attest_timestamp, int _revoke_timestamp, slice _attester, int _attester_pubkey, int _valid_until, int _data_location, int _revoked, tuple _recipients, int data_len, slice _data, int _schema_id, int _linked_attestation_id, int _attestation_id, slice _sp_address, int _revocable, int _reason_len, slice _reason) impure {
  int r_len = 0;
  tuple final_recipients = null();

  while (~ _recipients.is_null()) {
    var recipient = _recipients~pop_back();

    final_recipients~push_back(recipient);
    r_len = r_len + 1;
  }

  cell c3 = begin_cell()
    .store_uint(r_len, 64)
    .store_uint(cast_to_int(final_recipients), 1023)
    .end_cell();

  cell c2 = begin_cell()
    .store_uint(data_len, 8)
    .store_slice(_data)
    .store_uint(_schema_id, 64)
    .store_uint(_linked_attestation_id, 64)
    .store_uint(_attestation_id, 64)
    .store_slice(_sp_address)
    .store_uint(_revocable, 1)
    .store_uint(_reason_len, 8)
    .store_slice(_reason)
    .end_cell();
  cell attestation_data = begin_cell()
    .store_slice(_schema_address)
    .store_slice(_linked_attestation_address)
    .store_slice(_attester)
    .store_uint(_attest_timestamp, 32)
    .store_uint(_revoke_timestamp, 32)
    .store_uint(_attester_pubkey, 256)
    .store_uint(_valid_until, 32)
    .store_uint(_data_location, 2)
    .store_uint(_revoked, 1)
    .store_ref(c2)
    .store_ref(c3)
    .end_cell();

  return attestation_data;
}

;; ===================================================

() save_data (slice _schema_address, slice _linked_attestation_address, int _attest_timestamp, int _revoke_timestamp, slice _attester, int _attester_pubkey, int _valid_until, int _data_location, int _revoked, tuple _recipients, int _data_len, slice _data, int _schema_id, int _linked_attestation_id, int _attestation_id, slice _sp_address, int _revocable, int _reason_len, slice _reason) impure {
  cell attestation = compose_attestation(
    _schema_address,
    _linked_attestation_address,
    _attest_timestamp,
    _revoke_timestamp,
    _attester,
    _attester_pubkey,
    _valid_until,
    _data_location,
    _revoked,
    _recipients,
    _data_len,
    _data,
    _schema_id,
    _linked_attestation_id,
    _attestation_id,
    _sp_address,
    _revocable,
    _reason_len,
    _reason
  );

  set_data(attestation);
}

;; =============== messages =============================

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg) {
  if (in_msg.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  slice in_msg_full_slice = in_msg_full.begin_parse();
  int flags = in_msg_full_slice~load_uint(4);
  slice sender_address = in_msg_full_slice~load_msg_addr();

  if (flags & 1) {
    in_msg~skip_bits(32);  ;;0xFFFFFFFF

    int bounced_op = in_msg~load_uint(32);
    int bounced_query_id = in_msg~load_uint(64);
  
    return ();
  }

  int op = in_msg~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

  if (op == op::revoke) {
    load_data();
    throw_unless(error::unauthorized, equal_slices(sender_address, sp_address));

    if (revoked) {
      throw(error::attestation_already_revoked);
    }

    if (revocable != 1) {
      throw(error::attestation_irrevocable);
    }

    var signature = in_msg~load_bits(512);
    int reason_len = in_msg~load_uint(8);
    slice reason = in_msg~load_bits(reason_len);
    slice attester_sender = in_msg~load_msg_addr();
    int fees = in_msg~load_coins();
    int has_hook? = in_msg~load_uint(1);

    revoke(attester, attester_pubkey, reason, fees, signature, attester_sender);

    save_data(
      schema_address,
      linked_attestation_address,
      attest_timestamp,
      now(),
      attester,
      attester_pubkey,
      valid_until,
      data_location,
      1,
      recipients,
      data_len,
      data,
      schema_id,
      linked_attestation_id,
      attestation_id,
      sp_address,
      revocable,
      reason_len,
      reason
    );

    if (has_hook?) {
      cell attestation = get_attestation_data();
      cell body = compose_body(
        op::call_hook_from_attestation,
        query_id,
        begin_cell()
          .store_ref(attestation)
          .store_ref(in_msg~load_ref())
      );
      
      send_msg_with_body(1, sp_address, 0, body, 1);
    }

    return ();
  }

  throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== getters =============================

cell get_attestation_data() method_id {
  load_data();
  cell attestation = compose_attestation(
    schema_address,
    linked_attestation_address,
    attest_timestamp,
    revoke_timestamp,
    attester,
    attester_pubkey,
    valid_until,
    data_location,
    revoked,
    recipients,
    data_len,
    data,
    schema_id,
    linked_attestation_id,
    attestation_id,
    sp_address,
    revocable,
    reason_len,
    reason
  );
    
  return attestation;
}
