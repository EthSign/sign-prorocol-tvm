#pragma version >=0.3.0;

#include "../node_modules/@ston-fi/funcbox/autoload.fc";

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/definitions_helpers.fc";
#include "imports/utils.fc";

#include "operations/hash_ops.fc";

;; =============== storage =============================

global slice schema_id;
global slice linked_attestation_id;
global int attest_timestamp;
global int revoke_timestamp;
global slice attester;
global int attester_pubkey;
global int valid_until;
global int data_location;
global int revoked;
global int recipients_len;
global tuple recipients;
global int data;
global int schema_counter_id;
global int linked_attestation_counter_id;
global int attestation_counter_id;

;; load_data populates storage variables using stored data
() load_data() impure {
  var ds = get_data().begin_parse();

  schema_id = ds~load_msg_addr();
  linked_attestation_id = ds~load_msg_addr();
  attester = ds~load_msg_addr();
  attest_timestamp = ds~load_uint(32);
  revoke_timestamp = ds~load_uint(32);
  attester_pubkey = ds~load_uint(256);
  valid_until = ds~load_uint(32);
  data_location = ds~load_uint(2);
  revoked = ds~load_uint(1);

  slice s2 = ds~load_ref().begin_parse();
  data = s2~load_uint(256);
  schema_counter_id = s2~load_uint(64);
  linked_attestation_counter_id = s2~load_uint(64);
  attestation_counter_id = s2~load_uint(64);

  slice s3 = ds~load_ref().begin_parse();
  recipients_len = s3~load_uint(64);
  recipients = empty_tuple();

  int i = recipients_len;
  slice recipient = null();

  while (i > 0) {
    recipient =  s3~load_msg_addr();
    
    recipients~tpush(recipient);

    i = i - 1;
  }
}

;; save_data stores storage variables as a cell into persistent storage
() save_data (slice _schema_id, slice _linked_attestation_id, int _attest_timestamp, int _revoke_timestamp, slice _attester, int _attester_pubkey, int _valid_until, int _data_location, int _revoked, tuple _recipients, int _data, int _schema_counter_id, int _linked_attestation_counter_id, int _attestation_counter_id) impure {
  int r_len = _recipients.tlen();
  builder c3 = begin_cell()
    .store_uint(r_len, 64);

  int i = r_len;

  while (i > 0) {
    slice recipient = _recipients~tpop();

    c3 = c3.store_slice(recipient);
    i = i - 1;
  }

  var c2 = begin_cell()
    .store_uint(_data, 256)
    .store_uint(_schema_counter_id, 64)
    .store_uint(_linked_attestation_counter_id, 64)
    .store_uint(_attestation_counter_id, 64)
    .end_cell();
  var attestation_data = begin_cell()
    .store_slice(_schema_id)
    .store_slice(_linked_attestation_id)
    .store_slice(_attester)
    .store_uint(_attest_timestamp, 32)
    .store_uint(_revoke_timestamp, 32)
    .store_uint(_attester_pubkey, 256)
    .store_uint(_valid_until, 32)
    .store_uint(_data_location, 2)
    .store_uint(_revoked, 1)
    .store_ref(c2)
    .store_ref(c3.end_cell())
    .end_cell();

  set_data(attestation_data);
}

;; =============== messages =============================

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(slice in_msg) impure {
  if (in_msg.slice_empty?()) { ;; ignore all empty messages
    return ();
  }

  int flags = in_msg~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }

  int op = in_msg~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
  int query_id = in_msg~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
  slice sender_address = in_msg~load_msg_addr();

  if (op == op::revoke_attestation) {
    load_data();

    cell schema = in_msg~load_ref();

    (slice registrant, int registrant_pubkey, int revocable, int schema_data_location, int max_valid_for, int schema_timestamp, int schema_data, int schema_counter_id) = __get_schema_data(schema);

    if (revocable != 1) {
      throw(error::attestation_irrevocable);
    }

    if (revoked) {
      throw(error::attestation_already_revoked);
    }

    save_data(
      schema_id,
      linked_attestation_id,
      attest_timestamp,
      now(),
      attester,
      attester_pubkey,
      valid_until,
      data_location,
      1,
      recipients,
      data,
      schema_counter_id,
      linked_attestation_counter_id,
      attestation_counter_id
    );

    return ();
  }

  throw(error::unknown_op); ;; if the message contains an op that is not known to this contract, we throw
}

;; =============== getters =============================

cell get_attestation_data() method_id {
  load_data();
  
  var c3 = begin_cell()
    .store_uint(recipients_len, 64);

  int i = recipients_len;
  slice recipient = "";

  while (i > 0) {
    recipient = recipients~tpop();

    c3 = c3.store_slice(recipient);
    i = i - 1;
  }
  
  var c2 = begin_cell()
    .store_uint(data, 256)
    .store_uint(schema_counter_id, 64)
    .store_uint(linked_attestation_counter_id, 64)
    .store_uint(attestation_counter_id, 64)
    .end_cell();
  var attestation_data = begin_cell()
    .store_slice(schema_id)
    .store_slice(linked_attestation_id)
    .store_slice(attester)
    .store_uint(attest_timestamp, 32)
    .store_uint(revoke_timestamp, 32)
    .store_uint(attester_pubkey, 256)
    .store_uint(valid_until, 32)
    .store_uint(data_location, 2)
    .store_uint(revoked, 1)
    .store_ref(c2)
    .store_ref(c3.end_cell());
    
  return attestation_data.end_cell();
}
